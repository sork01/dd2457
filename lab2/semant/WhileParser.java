package semant;

//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Oct 15 11:30:10 CEST 2009
//----------------------------------------------------

import java.io.FileReader;
import java.lang.reflect.Field;
import java_cup.runtime.Symbol;
import semant.whilesyntax.*;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Thu Oct 15 11:30:10 CEST 2009
  */
public class WhileParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public WhileParser() {super();}

  /** Constructor which sets the default scanner. */
  public WhileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\003\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\003\010\000\002\003\006" +
    "\000\002\003\006\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\006\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\016\014\004\017\005\021\011\024\010\030" +
    "\007\032\006\001\002\000\014\002\uffff\015\uffff\020\uffff" +
    "\023\uffff\031\uffff\001\002\000\016\014\004\017\005\021" +
    "\011\024\010\030\007\032\006\001\002\000\040\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\020\uffeb\022\uffeb\023\uffeb\025\uffeb" +
    "\031\uffeb\001\002\000\016\014\004\017\005\021\011\024" +
    "\010\030\007\032\006\001\002\000\016\010\044\026\040" +
    "\027\043\030\041\032\006\033\022\001\002\000\016\010" +
    "\044\026\040\027\043\030\041\032\006\033\022\001\002" +
    "\000\004\013\017\001\002\000\006\002\015\015\014\001" +
    "\002\000\016\014\004\017\005\021\011\024\010\030\007" +
    "\032\006\001\002\000\004\002\000\001\002\000\014\002" +
    "\ufffe\015\ufffe\020\ufffe\023\ufffe\031\ufffe\001\002\000\010" +
    "\030\021\032\006\033\022\001\002\000\024\002\001\004" +
    "\026\005\027\006\032\015\001\016\030\020\001\023\001" +
    "\031\001\001\002\000\010\030\021\032\006\033\022\001" +
    "\002\000\036\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\011\uffea\012\uffea\015\uffea\016\uffea\020\uffea\022\uffea\023" +
    "\uffea\025\uffea\031\uffea\001\002\000\036\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\015\ufff8\016" +
    "\ufff8\020\ufff8\022\ufff8\023\ufff8\025\ufff8\031\ufff8\001\002" +
    "\000\036\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011" +
    "\ufff9\012\ufff9\015\ufff9\016\ufff9\020\ufff9\022\ufff9\023\ufff9" +
    "\025\ufff9\031\ufff9\001\002\000\014\004\026\005\027\006" +
    "\032\016\030\031\031\001\002\000\010\030\021\032\006" +
    "\033\022\001\002\000\010\030\021\032\006\033\022\001" +
    "\002\000\010\030\021\032\006\033\022\001\002\000\036" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\022\ufff3\023\ufff3\025\ufff3" +
    "\031\ufff3\001\002\000\010\030\021\032\006\033\022\001" +
    "\002\000\036\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\011\ufff5\012\ufff5\015\ufff5\016\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\025\ufff5\031\ufff5\001\002\000\036\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\022\ufff4\023\ufff4\025\ufff4\031\ufff4\001\002" +
    "\000\036\002\ufff6\004\ufff6\005\ufff6\006\032\007\ufff6\011" +
    "\ufff6\012\ufff6\015\ufff6\016\030\020\ufff6\022\ufff6\023\ufff6" +
    "\025\ufff6\031\ufff6\001\002\000\036\002\ufff7\004\ufff7\005" +
    "\ufff7\006\032\007\ufff7\011\ufff7\012\ufff7\015\ufff7\016\030" +
    "\020\ufff7\022\ufff7\023\ufff7\025\ufff7\031\ufff7\001\002\000" +
    "\006\011\046\022\057\001\002\000\012\011\ufff2\022\ufff2" +
    "\025\ufff2\031\ufff2\001\002\000\016\010\044\026\040\027" +
    "\043\030\041\032\006\033\022\001\002\000\016\004\026" +
    "\005\027\006\032\007\050\012\051\016\030\001\002\000" +
    "\012\011\ufff1\022\ufff1\025\ufff1\031\ufff1\001\002\000\016" +
    "\010\044\026\040\027\043\030\041\032\006\033\022\001" +
    "\002\000\012\011\uffee\022\uffee\025\uffee\031\uffee\001\002" +
    "\000\016\010\044\026\040\027\043\030\041\032\006\033" +
    "\022\001\002\000\012\011\uffed\022\uffed\025\uffed\031\uffed" +
    "\001\002\000\010\030\021\032\006\033\022\001\002\000" +
    "\010\030\021\032\006\033\022\001\002\000\022\004\026" +
    "\005\027\006\032\011\uffef\016\030\022\uffef\025\uffef\031" +
    "\uffef\001\002\000\022\004\026\005\027\006\032\011\ufff0" +
    "\016\030\022\ufff0\025\ufff0\031\ufff0\001\002\000\006\011" +
    "\046\031\056\001\002\000\020\004\026\005\027\006\032" +
    "\007\050\012\051\016\030\031\031\001\002\000\012\011" +
    "\uffec\022\uffec\025\uffec\031\uffec\001\002\000\016\014\004" +
    "\017\005\021\011\024\010\030\007\032\006\001\002\000" +
    "\006\015\014\023\061\001\002\000\016\014\004\017\005" +
    "\021\011\024\010\030\007\032\006\001\002\000\014\002" +
    "\ufffd\015\014\020\ufffd\023\ufffd\031\ufffd\001\002\000\006" +
    "\011\046\025\064\001\002\000\016\014\004\017\005\021" +
    "\011\024\010\030\007\032\006\001\002\000\014\002\ufffc" +
    "\015\014\020\ufffc\023\ufffc\031\ufffc\001\002\000\006\015" +
    "\014\031\067\001\002\000\014\002\ufffa\015\ufffa\020\ufffa" +
    "\023\ufffa\031\ufffa\001\002\000\006\015\014\020\071\001" +
    "\002\000\016\014\004\017\005\021\011\024\010\030\007" +
    "\032\006\001\002\000\014\002\ufffb\015\014\020\ufffb\023" +
    "\ufffb\031\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\006\003\012\006\011\001\001\000\002\001" +
    "\001\000\006\003\067\006\011\001\001\000\002\001\001" +
    "\000\006\003\065\006\011\001\001\000\012\004\041\005" +
    "\062\006\022\007\023\001\001\000\012\004\041\005\036" +
    "\006\022\007\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\015\006\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\017\006\022\007\023\001" +
    "\001\000\002\001\001\000\010\004\024\006\022\007\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\035\006\022\007\023" +
    "\001\001\000\010\004\034\006\022\007\023\001\001\000" +
    "\010\004\033\006\022\007\023\001\001\000\002\001\001" +
    "\000\010\004\032\006\022\007\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\054\005" +
    "\053\006\022\007\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\041\005\044\006\022\007\023\001" +
    "\001\000\002\001\001\000\012\004\041\005\046\006\022" +
    "\007\023\001\001\000\002\001\001\000\010\004\052\006" +
    "\022\007\023\001\001\000\010\004\051\006\022\007\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\057" +
    "\006\011\001\001\000\002\001\001\000\006\003\061\006" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\064\006\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\071" +
    "\006\011\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$WhileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$WhileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @SuppressWarnings("unchecked")
public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$WhileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @SuppressWarnings("all")
    
    public static Stm parse(String f) throws Exception {
        return (Stm) (new WhileParser(new WhileTokenizer(new FileReader(f))).parse().value);
    }
    
    public static String getConstantName(int value) {
        for (Field f : sym.class.getFields())
            try {
                if (f.getInt(null) == value)
                    return f.getName();
            } catch (Exception e) {
            }
        return "unknown";
    }
    public void report_error(String msg, Object info) {
        String errMsg = "Error: " + msg;
        Symbol s = null;
        if (info instanceof Symbol)
            s = (Symbol) info;
        //if (s != null && s.left >= 0)
        //    errMsg += " on line " + (s.left+1) + (s.right >= 0 ? " and col " + (s.right+1) : "");
        if (s != null)
            errMsg += " (sym: "+getConstantName(s.sym)+" value: " + s.value + ")";
        System.err.println(errMsg);
    }
    public void report_fatal_error(String msg, Object info) {
        report_error(msg, info);
        System.exit(-1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("unused")
class CUP$WhileParser$actions {
  private final WhileParser parser;

  /** Constructor */
  CUP$WhileParser$actions(WhileParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings("unchecked")
public final java_cup.runtime.Symbol CUP$WhileParser$do_action(
    int                        CUP$WhileParser$act_num,
    java_cup.runtime.lr_parser CUP$WhileParser$parser,
    java.util.Stack            CUP$WhileParser$stack,
    int                        CUP$WhileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$WhileParser$result;

      /* select the action based on the action number */
      switch (CUP$WhileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Num ::= NUMERAL 
            {
              Num RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Num(n); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(5/*Num*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var ::= VARID 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Var(id); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(4/*Var*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Bexp ::= LPAR Bexp RPAR 
            {
              Bexp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).right;
		Bexp b = (Bexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).value;
		 RESULT = b; 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bexp ::= Bexp AND Bexp 
            {
              Bexp RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Bexp b1 = (Bexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Bexp b2 = (Bexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Conjunction(b1, b2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Bexp ::= NOT Bexp 
            {
              Bexp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Bexp b = (Bexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Not(b); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bexp ::= Aexp LEQ Aexp 
            {
              Bexp RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Aexp a1 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a2 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new LessThanEq(a1, a2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bexp ::= Aexp EQUALS Aexp 
            {
              Bexp RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Aexp a1 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a2 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Equals(a1, a2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Bexp ::= FALSE 
            {
              Bexp RESULT = null;
		 RESULT = new FalseConst(); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Bexp ::= TRUE 
            {
              Bexp RESULT = null;
		 RESULT = new TrueConst(); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(3/*Bexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Aexp ::= LPAR Aexp RPAR 
            {
              Aexp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).right;
		Aexp a = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).value;
		 RESULT = a; 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Aexp ::= Aexp DIVIDE Aexp 
            {
              Aexp RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Aexp a1 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a2 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Divide(a1, a2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Aexp ::= Aexp TIMES Aexp 
            {
              Aexp RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Aexp a1 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a2 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Times(a1, a2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Aexp ::= Aexp MINUS Aexp 
            {
              Aexp RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Aexp a1 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a2 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Minus(a1, a2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Aexp ::= Aexp PLUS Aexp 
            {
              Aexp RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Aexp a1 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a2 = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Plus(a1, a2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Aexp ::= Var 
            {
              Aexp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Var x = (Var)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = x; 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Aexp ::= Num 
            {
              Aexp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Num n = (Num)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = n; 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(2/*Aexp*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stm ::= LPAR Stm RPAR 
            {
              Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).right;
		Stm s = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).value;
		 RESULT = s; 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= TRY Stm CATCH Stm 
            {
              Stm RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Stm s2 = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new TryCatch(s1, s2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= WHILE Bexp DO Stm 
            {
              Stm RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Bexp b = (Bexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Stm s = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new While(b, s); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stm ::= IF Bexp THEN Stm ELSE Stm 
            {
              Stm RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-4)).right;
		Bexp b = (Bexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Stm s2 = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Conditional(b, s1, s2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Stm ::= Stm SEMICOLON Stm 
            {
              Stm RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Stm s1 = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Stm s2 = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Compound(s1, s2); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Stm ::= SKIP 
            {
              Stm RESULT = null;
		 RESULT = new Skip(); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Stm EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).right;
		Stm start_val = (Stm)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).value;
		RESULT = start_val;
              CUP$WhileParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$WhileParser$parser.done_parsing();
          return CUP$WhileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Stm ::= Var ASSIGN Aexp 
            {
              Stm RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).right;
		Var x = (Var)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right;
		Aexp a = (Aexp)((java_cup.runtime.Symbol) CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).value;
		 RESULT = new Assignment(x, a); 
              CUP$WhileParser$result = new java_cup.runtime.Symbol(1/*Stm*/, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$WhileParser$stack.elementAt(CUP$WhileParser$top-0)).right, RESULT);
            }
          return CUP$WhileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

/* The following code was generated by JFlex 1.4.1 on 10/15/09 11:30 AM */


@SuppressWarnings("all")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10/15/09 11:30 AM from the specification file
 * <tt>while.lex</tt>
 */
class WhileTokenizer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 13,  0,  4,  0,  0, 14,  0, 36, 37, 10,  8,  0,  9,  0, 11, 
     6,  7,  7,  7,  7,  7,  7,  7,  7,  7, 16, 21, 15, 12,  0,  0, 
     0,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  0,  0,  0,  0, 
     0, 26,  5, 25, 33, 29, 28,  5, 27, 19,  5, 18, 31,  5, 30, 34, 
    20,  5, 23, 17, 22, 35,  5, 32,  5, 24,  5,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\2\1\1\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\2\2\1\1\14"+
    "\6\1\1\15\1\16\1\0\1\17\1\20\1\1\1\21"+
    "\6\1\1\22\1\1\1\23\6\1\1\24\1\25\1\26"+
    "\2\1\1\27\1\1\1\30\1\31\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\46\0\162\0\230\0\46\0\276"+
    "\0\46\0\46\0\46\0\46\0\46\0\46\0\46\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\46\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\46\0\46\0\162\0\46\0\46\0\u0260"+
    "\0\230\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\230"+
    "\0\u036a\0\230\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e"+
    "\0\230\0\230\0\230\0\u0474\0\u049a\0\230\0\u04c0\0\230"+
    "\0\230\0\230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\6\1\23\1\6\1\24\1\25\2\6\1\26"+
    "\2\6\1\27\1\30\2\6\1\31\1\32\2\6\1\33"+
    "\1\34\50\0\1\4\43\0\1\35\1\3\1\4\43\35"+
    "\5\0\1\6\13\0\4\6\1\0\16\6\10\0\2\10"+
    "\52\0\1\36\45\0\1\37\36\0\1\6\13\0\1\6"+
    "\1\40\2\6\1\0\16\6\7\0\1\6\13\0\4\6"+
    "\1\0\6\6\1\41\7\6\7\0\1\6\13\0\4\6"+
    "\1\0\1\6\1\42\3\6\1\43\10\6\7\0\1\6"+
    "\13\0\4\6\1\0\4\6\1\44\11\6\7\0\1\6"+
    "\13\0\4\6\1\0\4\6\1\45\11\6\7\0\1\6"+
    "\13\0\4\6\1\0\11\6\1\46\4\6\7\0\1\6"+
    "\13\0\4\6\1\0\5\6\1\47\10\6\7\0\1\6"+
    "\13\0\4\6\1\0\14\6\1\50\1\6\7\0\1\6"+
    "\13\0\2\6\1\51\1\6\1\0\16\6\7\0\1\6"+
    "\13\0\4\6\1\0\2\6\1\52\12\6\1\53\7\0"+
    "\1\6\13\0\4\6\1\0\7\6\1\54\6\6\7\0"+
    "\1\6\13\0\4\6\1\0\1\55\15\6\7\0\1\6"+
    "\13\0\4\6\1\0\11\6\1\56\4\6\7\0\1\6"+
    "\13\0\1\57\3\6\1\0\16\6\7\0\1\6\13\0"+
    "\2\6\1\60\1\6\1\0\16\6\7\0\1\6\13\0"+
    "\3\6\1\61\1\0\16\6\7\0\1\6\13\0\4\6"+
    "\1\0\7\6\1\62\6\6\7\0\1\6\13\0\4\6"+
    "\1\0\10\6\1\63\5\6\7\0\1\6\13\0\4\6"+
    "\1\0\3\6\1\64\12\6\7\0\1\6\13\0\1\65"+
    "\3\6\1\0\16\6\7\0\1\6\13\0\4\6\1\0"+
    "\7\6\1\66\6\6\7\0\1\6\13\0\4\6\1\0"+
    "\11\6\1\67\4\6\7\0\1\6\13\0\4\6\1\0"+
    "\5\6\1\70\10\6\7\0\1\6\13\0\4\6\1\0"+
    "\7\6\1\71\6\6\7\0\1\6\13\0\4\6\1\0"+
    "\7\6\1\72\6\6\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1254];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\7\11"+
    "\4\1\1\11\6\1\2\11\1\0\2\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[58];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  WhileTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  WhileTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return symbol(sym.TRY);
          }
        case 27: break;
        case 14: 
          { return symbol(sym.RPAR);
          }
        case 28: break;
        case 11: 
          { return symbol(sym.AND);
          }
        case 29: break;
        case 10: 
          { return symbol(sym.NOT);
          }
        case 30: break;
        case 20: 
          { return symbol(sym.SKIP);
          }
        case 31: break;
        case 16: 
          { return symbol(sym.ASSIGN);
          }
        case 32: break;
        case 12: 
          { return symbol(sym.SEMICOLON);
          }
        case 33: break;
        case 8: 
          { return symbol(sym.DIVIDE);
          }
        case 34: break;
        case 13: 
          { return symbol(sym.LPAR);
          }
        case 35: break;
        case 21: 
          { return symbol(sym.TRUE);
          }
        case 36: break;
        case 23: 
          { return symbol(sym.ELSE);
          }
        case 37: break;
        case 24: 
          { return symbol(sym.CATCH);
          }
        case 38: break;
        case 17: 
          { return symbol(sym.IF);
          }
        case 39: break;
        case 2: 
          { throw new RuntimeException("Could not match input: " + yytext());
          }
        case 40: break;
        case 25: 
          { return symbol(sym.FALSE);
          }
        case 41: break;
        case 9: 
          { return symbol(sym.EQUALS);
          }
        case 42: break;
        case 18: 
          { return symbol(sym.DO);
          }
        case 43: break;
        case 15: 
          { return symbol(sym.LEQ);
          }
        case 44: break;
        case 22: 
          { return symbol(sym.THEN);
          }
        case 45: break;
        case 4: 
          { return symbol(sym.NUMERAL, yytext());
          }
        case 46: break;
        case 5: 
          { return symbol(sym.PLUS);
          }
        case 47: break;
        case 6: 
          { return symbol(sym.MINUS);
          }
        case 48: break;
        case 1: 
          { return symbol(sym.VARID, yytext());
          }
        case 49: break;
        case 7: 
          { return symbol(sym.TIMES);
          }
        case 50: break;
        case 26: 
          { return symbol(sym.WHILE);
          }
        case 51: break;
        case 3: 
          { 
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Oct 15 11:30:10 CEST 2009
//----------------------------------------------------

/** CUP generated class containing symbol constants. */
class sym {
  /* terminals */
  public static final int TIMES = 4;
  public static final int AND = 7;
  public static final int ELSE = 17;
  public static final int SEMICOLON = 11;
  public static final int PLUS = 2;
  public static final int THEN = 16;
  public static final int WHILE = 18;
  public static final int NOT = 6;
  public static final int TRUE = 20;
  public static final int IF = 15;
  public static final int DO = 19;
  public static final int TRY = 13;
  public static final int VARID = 24;
  public static final int EQUALS = 5;
  public static final int EOF = 0;
  public static final int DIVIDE = 12;
  public static final int FALSE = 21;
  public static final int MINUS = 3;
  public static final int error = 1;
  public static final int ASSIGN = 9;
  public static final int CATCH = 14;
  public static final int LEQ = 8;
  public static final int RPAR = 23;
  public static final int NUMERAL = 25;
  public static final int LPAR = 22;
  public static final int SKIP = 10;
}

